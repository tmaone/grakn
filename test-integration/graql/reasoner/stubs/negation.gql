define

baseType sub entity,
    has resource-string,
    has resource-long,
    has derived-resource-string,
    has derived-resource-boolean,
    has absent-resource,
    plays someRole,
    plays anotherRole,
    plays otherRole;

someType sub baseType;
anotherType sub baseType;
derived-type sub baseType;

someRole sub role;
anotherRole sub role;
otherRole sub role;

binary sub relation,
    relates someRole,
    relates otherRole;

ternary sub relation,
    relates someRole,
    relates otherRole,
    relates anotherRole;

derived-binary sub relation,
    relates someRole,
    relates otherRole;
derived-ternary sub relation,
    relates someRole,
    relates otherRole,
    relates anotherRole;

#Resources
resource-string sub attribute, datatype string;
resource-long sub attribute, datatype long;
absent-resource sub attribute, datatype string;

derived-resource-string sub attribute, datatype string;
derived-resource-boolean sub attribute, datatype boolean;

#Rules

attachUnattachedResourceToEntity sub rule,
    when {
        $x isa resource-string;
        $x == 'unattached';
        $y isa someType;
    },
    then {
        $y has derived-resource-string 'attached';
    };

setResourceFlagBasedOnOtherResourceValue sub rule,
    when {
        $x isa anotherType, has resource-long > 0;
    },
    then {
        $x has derived-resource-boolean true;
    };

binaryEquivalence sub rule,
    when {
        (someRole:$x, otherRole:$z) isa binary;
    },
    then {
        (someRole:$x, otherRole:$z) isa derived-binary;
    };

binaryTransitivity sub rule,
    when {
        (someRole:$x, otherRole:$z) isa derived-binary;
        (someRole:$z, otherRole:$y) isa derived-binary;
    },
    then {
        (someRole:$x, otherRole:$y) isa derived-binary;
    };

ternaryDefinition sub rule,
    when {
        (someRole:$x, otherRole:$z) isa binary;
        (someRole:$z, otherRole:$y) isa binary;
    },
    then {
        (someRole:$x, otherRole:$y, anotherRole: $z) isa ternary;
    };

ternaryEquivalence sub rule,
    when {
        (someRole:$x, otherRole:$y, anotherRole: $z) isa ternary;
    },
    then {
        (someRole:$x, otherRole:$y, anotherRole: $z) isa derived-ternary;
    };

typeDerivation sub rule,
    when {
        $x isa someType;
        ($x, $y) isa binary;
    },
    then {
        $x isa derived-type;
    };

negationRuleWithAbsentType sub rule,
    when {
        $x isa someType;
        not { $x has absent-resource $val;};
    },
    then {
        $x has derived-resource-string "no absent-resource attached";
    };

insert

#Data

$x isa someType, has resource-string "value";
$y isa someType;
$z isa someType;
$v isa someType, has resource-string "someString";
(someRole: $x, otherRole: $y) isa binary;
(someRole: $y, otherRole: $q) isa binary;
(someRole: $y, otherRole: $v) isa binary;

(someRole: $x, otherRole: $z) isa binary;
(someRole: $z, otherRole: $v) isa binary;


$q isa anotherType, has resource-long 1;

$r "unattached" isa resource-string;