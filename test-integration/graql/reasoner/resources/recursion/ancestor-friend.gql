define


###################################################
####################Schema########################
#################################################

person sub entity,
    has name;

friend sub role;
Friend sub relation, relates friend;
person plays friend, plays friend;

parent sub role;
child sub role;
Parent sub relation, relates parent, relates child;
person plays parent, plays child;

ancestor sub role;
ancestor-friend sub role;
Ancestor-friend sub relation, relates ancestor, relates ancestor-friend;
person plays ancestor, plays ancestor-friend;

name sub attribute, datatype string;

insert

####################################################
##################DATA#############################
####################################################

$a isa person, has name "a";
$b isa person, has name "b";
$c isa person, has name "c";
$d isa person, has name "d";
$g isa person, has name "g";

(parent: $a, child: $b) isa Parent;
(parent: $b, child: $c) isa Parent;
(friend: $a, friend: $g) isa Friend;
(friend: $c, friend: $d) isa Friend;

define

####################################################
##################RULES#############################
####################################################

rule-1
when {
(friend: $x, friend: $y) isa Friend;},
then {
(ancestor: $x, ancestor-friend: $y) isa Ancestor-friend;};

rule-2
when {
(parent: $x, child: $z) isa Parent;
(ancestor: $z, ancestor-friend: $y) isa Ancestor-friend;},
then {
(ancestor: $x, ancestor-friend: $y) isa Ancestor-friend;};
