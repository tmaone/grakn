#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2019 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

version: 2.1
orbs:
  win: circleci/windows@2.0.0
commands:
  install-bazel-linux-rbe:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-linux.sh
      - run: bash ./install-bazel-linux.sh && rm ./install-bazel-linux.sh
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-rbe.sh
      - run: bash ./install-bazel-rbe.sh && rm ./install-bazel-rbe.sh

  install-bazel-mac:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-mac.sh
      - run: bash ./install-bazel-mac.sh && rm ./install-bazel-mac.sh

  run-bazel-rbe:
    parameters:
      command:
        type: string
    steps:
      - run:
          command: bazel run @graknlabs_build_tools//ci:run-bazel-rbe -- << parameters.command >>
          no_output_timeout: 1h

jobs:
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel build //...
      - run:
          command: bazel run @graknlabs_build_tools//unused_deps -- list
          no_output_timeout: 30m

  build-checkstyle:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: bazel run @graknlabs_build_tools//checkstyle:test-coverage
      - run-bazel-rbe:
          command: bazel test $(bazel query 'kind(checkstyle_test, //...)')

  build-analysis:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          SONARCLOUD_CODE_ANALYSIS_CREDENTIAL=$SONARCLOUD_CREDENTIAL \
            bazel run @graknlabs_build_tools//sonarcloud:code-analysis -- \
            --organisation=$SONARCLOUD_ORGANISATION \
            --project-key=$SONARCLOUD_PROJECT_KEY \
            --commit-id=$CIRCLE_SHA1 \
            --branch=$CIRCLE_BRANCH
  
  test-common:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //common/... --test_output=errors

  test-server:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //server/... --test_output=errors

  test-integration:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-integration/server/... --test_output=errors
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/executor/... --test_output=errors
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/query/... --test_output=errors

  test-integration-reasoner:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/reasoner/... --test_output=errors

  test-integration-analytics:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-integration/graql/analytics/... --test_output=errors

  test-end-to-end:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel test //test-end-to-end:test-end-to-end --test_output=streamed --spawn_strategy=standalone

  test-assembly-mac-zip:
    macos:
      xcode: "10.2.1"
    working_directory: ~/grakn
    steps:
      - install-bazel-mac
      - checkout
      - run-bazel-rbe:
          command: bazel build //:assemble-mac-zip
      - run: TEST_CACHE_TOKEN=$REPO_GITHUB_TOKEN bazel run @graknlabs_build_tools//ci:test-cache -- --file $(pwd)/bazel-genfiles/grakn-core-all-mac.zip --get
      - run: unzip bazel-genfiles/grakn-core-all-mac.zip -d bazel-genfiles/
      - run: nohup bazel-genfiles/grakn-core-all-mac/grakn server start
      - run: bazel test //test/common:grakn-application-test --test_output=streamed --spawn_strategy=standalone --cache_test_results=no
      - run: bazel-genfiles/grakn-core-all-mac/grakn server stop
      - run: TEST_CACHE_TOKEN=$REPO_GITHUB_TOKEN bazel run @graknlabs_build_tools//ci:test-cache -- --file $(pwd)/bazel-genfiles/grakn-core-all-mac.zip --save-success
      - store_artifacts:
          path: bazel-genfiles/grakn-core-all-mac/logs/grakn.log
          destination: logs/grakn.log
      - store_artifacts:
          path: bazel-genfiles/grakn-core-all-mac/logs/cassandra.log
          destination: logs/cassandra.log

  test-assembly-windows-zip:
    executor:
      name: win/default
      shell: cmd.exe
    working_directory: ~/grakn
    steps:
      - checkout
      - run: .circleci\windows\prepare.bat
      - run: .circleci\windows\test-assembly.bat

  test-assembly-linux-targz:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel build //:assemble-linux-targz
      - run: TEST_CACHE_TOKEN=$REPO_GITHUB_TOKEN bazel run @graknlabs_build_tools//ci:test-cache -- --file $(pwd)/bazel-genfiles/grakn-core-all-linux.tar.gz --get
      - run: tar -xf bazel-genfiles/grakn-core-all-linux.tar.gz -C bazel-genfiles
      - run: nohup bazel-genfiles/grakn-core-all-linux/grakn server start
      - run: bazel test //test/common:grakn-application-test --test_output=streamed --spawn_strategy=standalone --cache_test_results=no
      - run: bazel-genfiles/grakn-core-all-linux/grakn server stop
      - run: TEST_CACHE_TOKEN=$REPO_GITHUB_TOKEN bazel run @graknlabs_build_tools//ci:test-cache -- --file $(pwd)/bazel-genfiles/grakn-core-all-linux.tar.gz --save-success
      - store_artifacts:
          path: bazel-genfiles/grakn-core-all-linux/logs/grakn.log
          destination: logs/grakn.log
      - store_artifacts:
          path: bazel-genfiles/grakn-core-all-linux/logs/cassandra.log
          destination: logs/cassandra.log

  test-assembly-docker:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: test/assembly/docker.py
      - store_artifacts:
          path: ./grakn.log
          destination: logs/grakn.log
      - store_artifacts:
          path: ./cassandra.log
          destination: logs/cassandra.log

  deploy-apt-snapshot:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export DEPLOY_APT_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_APT_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run --define version=$(git rev-parse HEAD) //server:deploy-apt -- snapshot
          bazel run --define version=$(git rev-parse HEAD) //:deploy-apt -- snapshot

  deploy-rpm-snapshot:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: sudo apt-get update && sudo apt-get install rpm
      - run: |
          export DEPLOY_RPM_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_RPM_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run --define version=$(git rev-parse HEAD) //server:deploy-rpm -- snapshot
          bazel run --define version=$(git rev-parse HEAD) //:deploy-rpm -- snapshot

  test-deployment-linux-apt:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: sudo add-apt-repository 'deb [ arch=all ] https://repo.grakn.ai/repository/apt-snapshot/ trusty main'
      - run: sudo add-apt-repository 'deb [ arch=all ] https://repo.grakn.ai/repository/apt/ trusty main'
      - run: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 8F3DA4B5E9AEF44C
      - run: sudo apt update
      - run: echo 0.0.0-$CIRCLE_SHA1 > VERSION && cat VERSION
      - run: bazel run //test/deployment/apt:install
      - run: sudo chown -R circleci:circleci /opt/grakn/ # TODO: how do we avoid having to chown?
      - run: nohup grakn server start
      - run: bazel test //test/common:grakn-application-test --test_output=streamed --spawn_strategy=standalone --cache_test_results=no
      - run: grakn server stop
      - store_artifacts:
          path: /opt/grakn/core/logs/grakn.log
          destination: logs/grakn.log
      - store_artifacts:
          path: /opt/grakn/core/logs/cassandra.log
          destination: logs/cassandra.log

  test-deployment-linux-rpm:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - run: echo 0.0.0_$CIRCLE_SHA1 > VERSION && cat VERSION
      - run: test/deployment/rpm/test.py
      - store_artifacts:
          path: ./grakn.log
          destination: logs/grakn.log
      - store_artifacts:
          path: ./cassandra.log
          destination: logs/cassandra.log

  sync-dependencies-snapshot:
    machine: true
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export SYNC_DEPENDENCIES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:sync-dependencies -- \
          --source grakn@$CIRCLE_SHA1 \
          --targets \
          grakn-kgms:master workbase:master benchmark:master \
          client-java:master console:master kglib:master
        # TODO: Remove benchmark and client-java once #5272 is solved
        # TODO: Remove console once #5270 is solved

  release-approval:
    machine: true
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export RELEASE_APPROVAL_USERNAME=$REPO_GITHUB_USERNAME
          export RELEASE_APPROVAL_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:release-approval

  release-validate:
    machine: true
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          bazel run @graknlabs_build_tools//ci:release-validate-deps -- \
            graknlabs_common graknlabs_graql graknlabs_protocol graknlabs_console

  deploy-github:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          pip install certifi
          export RELEASE_NOTES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:release-notes -- grakn $(cat VERSION) ./RELEASE_TEMPLATE.md
      - run: |
          export DEPLOY_GITHUB_TOKEN=$REPO_GITHUB_TOKEN
          bazel run --define version=$(cat VERSION) //:deploy-github -- $CIRCLE_SHA1

  deploy-apt:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: cat VERSION
      - run: |
          export DEPLOY_APT_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_APT_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run --define version=$(cat VERSION) //server:deploy-apt -- release
          bazel run --define version=$(cat VERSION) //:deploy-apt -- release

  deploy-rpm:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: sudo apt-get update && sudo apt-get install rpm
      - run: cat VERSION
      - run: |
          export DEPLOY_RPM_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_RPM_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run --define version=$(cat VERSION) //server:deploy-rpm -- release
          bazel run --define version=$(cat VERSION) //:deploy-rpm -- release

  deploy-brew:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export DEPLOY_BREW_TOKEN=$REPO_GITHUB_TOKEN
          bazel run --define version=$(cat VERSION) //:deploy-brew -- release

  deploy-docker:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          docker login -u $REPO_DOCKER_USERNAME -p $REPO_DOCKER_PASSWORD
          bazel run //:deploy-docker

  sync-dependencies-release:
    machine: true
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          export SYNC_DEPENDENCIES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_build_tools//ci:sync-dependencies -- \
          --source grakn@$(cat VERSION) \
          --targets \
          grakn-kgms:master benchmark:master workbase:master biograkn:master \
          client-java:master client-python:master client-nodejs:master console:master \
          docs:master examples:master kglib:master

  release-notification:
    machine: true
    working_directory: ~/grakn
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          curl http://www.jetmore.org/john/code/swaks/files/swaks-20130209.0/swaks -o swaks
          chmod +x swaks
          sudo apt-get -y install perl
      - run: |
          ./swaks --auth \
          --server smtp.mailgun.org:587 \
          --au $SMTP_MAILGUN_EMAIL \
          --ap $SMTP_MAILGUN_PASSWORD \
          --from $SMTP_MAILGUN_EMAIL \
          --to paul.andlinger@solid-it.at,tomas@grakn.ai \
          --h-Subject: "Please update Grakn version" \
          --body "This is an automated email to inform you that Grakn $(cat VERSION) has been released. Please update the Grakn version accordingly."

  release-cleanup:
    machine: true
    steps:
      - checkout
      - run: git push --delete https://$REPO_GITHUB_TOKEN@github.com/graknlabs/grakn $CIRCLE_BRANCH

workflows:
  grakn-core:
    jobs:
      - build:
          filters:
            branches:
              ignore: grakn-release-branch
      - build-checkstyle:
          filters:
            branches:
              ignore: grakn-release-branch
      - build-analysis:
          filters:
            branches:
              only:
                - master
                - rewrite
      - test-common:
          filters:
            branches:
              ignore: grakn-release-branch
      - test-server:
          filters:
            branches:
              ignore: grakn-release-branch
      - test-integration:
          filters:
            branches:
              ignore: grakn-release-branch
      - test-integration-reasoner:
          filters:
            branches:
              ignore: grakn-release-branch
      - test-integration-analytics:
          filters:
            branches:
              ignore: grakn-release-branch
      - test-end-to-end:
          filters:
            branches:
              ignore: grakn-release-branch
      - test-assembly-mac-zip:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - build
            - build-checkstyle
            - build-analysis
            - test-common
            - test-server
            - test-integration
            - test-integration-reasoner
            - test-integration-analytics
            - test-end-to-end
      - test-assembly-windows-zip:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - build
            - build-checkstyle
            - build-analysis
            - test-common
            - test-server
            - test-integration
            - test-integration-reasoner
            - test-integration-analytics
            - test-end-to-end
      - test-assembly-linux-targz:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - build
            - build-checkstyle
            - build-analysis
            - test-common
            - test-server
            - test-integration
            - test-integration-reasoner
            - test-integration-analytics
            - test-end-to-end
      - test-assembly-docker:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - build
            - build-checkstyle
            - build-analysis
            - test-common
            - test-server
            - test-integration
            - test-integration-reasoner
            - test-integration-analytics
            - test-end-to-end
      - deploy-apt-snapshot:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - test-assembly-mac-zip
            - test-assembly-windows-zip
            - test-assembly-linux-targz
            - test-assembly-docker
      - deploy-rpm-snapshot:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - test-assembly-mac-zip
            - test-assembly-windows-zip
            - test-assembly-linux-targz
            - test-assembly-docker
      - test-deployment-linux-apt:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - deploy-apt-snapshot
      - test-deployment-linux-rpm:
          filters:
            branches:
              only:
                - master
                - rewrite
          requires:
            - deploy-rpm-snapshot
      - sync-dependencies-snapshot:
          filters:
            branches:
              only: master
          requires:
            - test-deployment-linux-apt
            - test-deployment-linux-rpm
      - release-approval:
          filters:
            branches:
              only: master
          requires:
            - sync-dependencies-snapshot

  grakn-core-release:
    jobs:
      - release-validate:
          filters:
            branches:
              only: grakn-release-branch
      - deploy-github:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - release-validate
      - deploy-approval:
          type: approval
          requires:
            - deploy-github
          filters:
            branches:
              only: grakn-release-branch
      - deploy-apt:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - deploy-approval
      - deploy-rpm:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - deploy-approval
      - deploy-brew:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - deploy-approval
      - deploy-docker:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - deploy-approval
      - sync-dependencies-release:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - deploy-apt
            - deploy-rpm
            - deploy-brew
            - deploy-docker
      - release-notification:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - sync-dependencies-release
      - release-cleanup:
          filters:
            branches:
              only: grakn-release-branch
          requires:
            - release-notification
